{
  "version": 3,
  "sources": ["../../../../../../app/routes/dashboard/settings/security/_route.tsx"],
  "sourcesContent": ["import type { V2_MetaFunction, ActionArgs } from \"@remix-run/node\";\nimport {\n  Card,\n  Button,\n  Input,\n  CardHeader,\n  CardTitle,\n  CardFooter,\n  buttonVariants,\n  CardContent,\n} from \"~/components/ui\";\nimport bcrypt from \"bcryptjs\";\nimport { json } from \"@remix-run/node\";\nimport { conform, useForm } from \"@conform-to/react\";\nimport { parse } from \"@conform-to/zod\";\nimport { z } from \"zod\";\nimport { Link, useFetcher } from \"@remix-run/react\";\n// session\nimport { requireUserId } from \"~/session.server\";\n//\nimport { prisma } from \"~/db.server\";\nimport { Loader2 } from \"lucide-react\";\nimport { InfoTooltip } from \"~/components/admin\";\nimport { cn } from \"~/utils/cn\";\n\nexport const meta: V2_MetaFunction = () => [\n  { title: \"Settings: Security | Remix templates\" },\n];\n\nconst schema = z\n  .object({\n    currentPassword: z\n      .string({ required_error: \"Current password is required\" })\n      .min(4, \"Current password must be at least 4 characters.\"),\n    newPassword: z\n      .string({ required_error: \"New password is required\" })\n      .min(4, \"New password must be at least 4 characters.\"),\n    confirmNewPassword: z\n      .string({ required_error: \"Confirm new password is required\" })\n      .min(4, \"Confirm new password must be at least 4 characters.\"),\n  })\n  .superRefine(({ currentPassword, newPassword, confirmNewPassword }, ctx) => {\n    if (newPassword === currentPassword) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"newPassword\"],\n        message: \"New password must be different from the current password.\",\n      });\n    }\n    if (newPassword !== confirmNewPassword) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        path: [\"confirmNewPassword\"],\n        message: \"Confirm password must match the new password\",\n      });\n    }\n  });\n\nexport async function action({ request }: ActionArgs) {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n\n  const submission = parse(formData, { schema });\n\n  if (!submission.value) {\n    return json(submission, { status: 400 });\n  }\n\n  const userWithPassword = await prisma.user.findUnique({\n    where: { id: userId },\n    include: {\n      password: true,\n    },\n  });\n\n  if (!userWithPassword || !userWithPassword.password) {\n    return json(\n      {\n        ...submission,\n        user: \"User not found\",\n      },\n      { status: 400 }\n    );\n  }\n\n  const isPasswordValid = await bcrypt.compare(\n    submission.value.currentPassword,\n    userWithPassword.password.hash\n  );\n\n  if (!isPasswordValid) {\n    return json(\n      {\n        ...submission,\n        error: { currentPassword: [\"Current password is incorrect\"] },\n      },\n      { status: 400 }\n    );\n  }\n\n  await bcrypt.hash(submission.value.newPassword, 10);\n\n  //   const user = await prisma.user.update({\n  //     where: { id: userId },\n  //     data: {\n  //       password: {\n  //         update: {\n  //           hash: hashedPassword,\n  //         },\n  //       },\n  //     },\n  //   });\n\n  return json(submission);\n}\n\nexport default function _route() {\n  const editPasswordFetcher = useFetcher<typeof action>();\n  const actionData = editPasswordFetcher.data;\n  const isSubmitting = editPasswordFetcher.state !== \"idle\";\n\n  const [form, { currentPassword, newPassword, confirmNewPassword }] = useForm<\n    z.input<typeof schema>\n  >({\n    lastSubmission: actionData,\n    id: \"password\",\n    shouldValidate: \"onBlur\",\n    onValidate({ formData }) {\n      return parse(formData, { schema });\n    },\n  });\n\n  return (\n    <Card className=\"basis-8/12\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <span>Security</span>\n          <InfoTooltip message=\"Update password\" />\n        </CardTitle>\n      </CardHeader>\n\n      <editPasswordFetcher.Form method=\"PUT\" {...form.props}>\n        <fieldset className=\"disabled:opacity-70\" disabled={isSubmitting}>\n          <CardContent className=\"my-6 space-y-6 border-y border-secondary-100 py-8\">\n            <Input\n              label=\"Current password\"\n              placeholder=\"Current password\"\n              error={\n                currentPassword.error ?? actionData?.error.currentPassword?.[0]\n              }\n              {...conform.input(currentPassword, {\n                type: \"password\",\n              })}\n            />\n\n            <Input\n              label=\"New password\"\n              placeholder=\"New password\"\n              error={newPassword.error}\n              {...conform.input(newPassword, {\n                type: \"password\",\n              })}\n            />\n\n            <em className=\"text-gray text-xs leading-loose\">\n              At least 4 characters\n            </em>\n\n            <Input\n              label=\"Confirm new password\"\n              placeholder=\"Confirm new password\"\n              error={confirmNewPassword.error}\n              {...conform.input(confirmNewPassword, {\n                type: \"password\",\n              })}\n            />\n          </CardContent>\n\n          <CardFooter className=\"gap-5\">\n            <Link\n              to=\"/dashboard/overview\"\n              className={cn(buttonVariants({ variant: \"outline\", size: \"lg\" }))}\n            >\n              Go back\n            </Link>\n            <Button size=\"lg\">\n              {isSubmitting ? (\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n              ) : (\n                \"Save\"\n              )}\n            </Button>\n          </CardFooter>\n        </fieldset>\n      </editPasswordFetcher.Form>\n    </Card>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
